



Windows进程的特点:
	1.进程包含了执行代码
	2.进程都具有私有的地址空间
	3.每个进程都有一个ID, 标识进程
	4.每个进程都有自己的安全属性
	5.至少要包含一个可以执行的线程



进程的环境
	环境信息的获取
	LPVOID GetEnvironmentStrings(void);
	
	
	//释放
	FreeEnvironmentStrings(LPTSTR )



	//从调用该函数的进程的环境变量中返回指定的变量名值的函数
	DWORD GetEnvironmentVariable(
		LPCTSTR lpName, // 要获取值的变量名字符串指针.
		LPTSTR lpBuffer, // 接收变量值的字符串指针
		DWORD nSize // 接收变量值的内存大小.
	);

	
	GetCurrentProcessId   //获取进程id
	GetCurrentProcess  //获取进程句柄
	
	
	HANDLE OpenProcess(
		DWORD dwDesiredAccess, //访问标志
		BOOL bInheritHandle, // 是否继承句柄
		DWORD dwProcessId// 进程标示符
	);

	
	// 使用psapi	
	//获取进程所使用的所有的模块信息(dll)
	

////////////////////////////////////////////
//使用psapi , vs2015  包含 #include <psapi.h> 直接可以使用 
void ShowProcInfo()
{
	HANDLE hProc = GetCurrentProcess();
	HMODULE hModules[256] = { 0 };
	DWORD iNeed = 0;

	EnumProcessModules(hProc, hModules, 256, &iNeed);

	DWORD iCount = iNeed / sizeof(HMODULE);

	for (DWORD i = 0; i < iCount; i++)
	{
		//获取模块的文件路径
		CHAR szPath[MAX_PATH] = { 0 };
		GetModuleFileName(hModules[i], szPath, MAX_PATH);

		printf("%d:%p --> %s\n", i + 1, hModules[i], szPath);
	}
}
///////////////////////////////////////////


进程的使用 

	1.创建进程
	BOOL CreateProcess(
		LPCTSTR lpApplicationName,
		LPTSTR lpCommandLine,
		LPSECURITY_ATTRIBUTES lpProcessAttributes,
		LPSECURITY_ATTRIBUTES lpThreadAttributes,
		BOOL bInheritHandles,
		DWORD dwCreationFlags,
		LPVOID lpEnvironment,
		LPCTSTR lpCurrentDirectory,
		LPSTARTUPINFO lpStartupInfo,
		LPPROCESS_INFORMATION lpProcessInformation
	);

	2.打开进程
		OpenProcess

	3.结束进程
		DECLSPEC_NORETURN VOID ExitProcess(  UINT uExitCode);

		BOOL TerminateProcess(
			HANDLE hProcess,//进程句柄
			UINT uExitCode //进程终止码
		);
	
	4.等候子进程结束
		DWORD WINAPI WaitForSingleObject(
			__in HANDLE hHandle, //子进程句柄
			__in DWORD dwMilliseconds   //等待的时间,毫秒级
		);




Windows作业

	实际上是一个进程组, 可以对作业设置权限, 一旦进程加入到作业之内, 进程的权限
	将被作业限制.

	
作业的使用
	
	1.创建作业
		HANDLE CreateJobObjectA(
  			LPSECURITY_ATTRIBUTES lpJobAttributes, //安全属性
  			LPCSTR                lpName //名称
		);	
	2.设置作业权限
		BOOL WINAPI SetInformationJobObject(
 			_In_ HANDLE             hJob, //job句柄
  			_In_ JOBOBJECTINFOCLASS JobObjectInfoClass, //Job权限类型
  			_In_ LPVOID             lpJobObjectInfo, //类型所对应的数据结构的地址
  			_In_ DWORD              cbJobObjectInfoLength //类型所对应的数据结构地址
		);
	3.将进程加入作业
		BOOL WINAPI AssignProcessToJobObject(
  			_In_ HANDLE hJob,	//job句柄
  			_In_ HANDLE hProcess  //进程句柄
		);
	4.关闭作业
		CloseHandle
		
	5.结束作业
		TerminateJobObject 结束作业, 但是并不是所有情况下, 作业内的进程
		都能被结束(级别较高,不能被结束)


//////////////////////////////////////////////////////////////////////////////////

// WinJob.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#define _WIN32_WINNT 0x0500     //NT5.0以上支持, 作业
#include "windows.h"



HANDLE Create(LPSTR pszPath)
{
	STARTUPINFO si = {0};
	PROCESS_INFORMATION pi = {0};
	si.cb = sizeof(si);
	CreateProcess(pszPath, 
			NULL, NULL, NULL, FALSE, 0,
			NULL, NULL, &si, &pi);

	return pi.hProcess;
}

void Job()
{
	//创建Job对象
	HANDLE hJob = CreateJobObject(NULL, "MyJob");
	
	JOBOBJECT_BASIC_UI_RESTRICTIONS ui = {0};
	ui.UIRestrictionsClass = JOB_OBJECT_UILIMIT_READCLIPBOARD|JOB_OBJECT_UILIMIT_WRITECLIPBOARD;
	//设置作业权限
	SetInformationJobObject(hJob, JobObjectBasicUIRestrictions, &ui, sizeof(ui));

	//创建进程
	HANDLE  hProc = Create("C:\\WINDOWS\\system32\\mspaint.exe");

	//将进程添加到作业(进程组)中
	AssignProcessToJobObject(hJob, hProc);

	//结束作业
	CloseHandle(hJob);

}



int main(int argc, char* argv[])
{
	Job();
	printf("Hello World!\n");
	return 0;
}



//////////////////////////////////////////////////////////////////////////////////

Windows线程


	Windows的线程是进程可以执行代码的实体, Windows系统可以调度的执行代码, 一个
	进程中至少有一个或多个线程, 每个线程是进程的一个任务分支.

	
	线程的特点:
		1.每个线程都有一个id
		2.每个线程都有自己的安全属性
		3.每个线程有自己的内存栈
	

	进程和线程多任务
		多个进程实现的多任务: 进程地址空间是各自私有,内存和资源不能共享
		多线程实现的多任务: 线程都位于同一个进程的地址空间, 内存和资源可以共享



	线程的执行方式:
		轮询



线程的使用

	1.定义线程处理函数
		DWORD WINAPI ThreadProc(LPVOID lpParameter);
	2.创建线程
		HANDLE CreateThread(
			LPSECURITY_ATTRIBUTES lpThreadAttributes,//安全属性
			SIZE_T dwStackSize,//初始化栈的大小, 缺省为0
			LPTHREAD_START_ROUTINE lpStartAddress,//线程处理函数指针
			LPVOID lpParameter,		//线程参数
			DWORD dwCreationFlags,   	//创建方式, CREATE_SUSPENDED 挂起 
			LPDWORD lpThreadId        	//线程ID
		)
		//返回值:  创建好的线程句柄
		
	3.结束线程
		ExitThread
		TerminateThread
	4.线程挂起 和 执行
		
		ResumeThread (_In_HANDLE hThread)   //执行线程

		DWORD WINAPI SuspendThread(
　　			_In_HANDLE hThread
　　		);
		
	
	5.等候线程的结束
		可以使用WaitForSingleObject 等待线程结束

		
		
	6.关闭线程句柄
		CloseHandle    //将句柄资源释放, 线程不一定会结束



线程局部存储  Thread Local Storage
	多个线程使用同一个变量, 每个线程都对变量进行操作, 
	那么变量的值会被不同线程操作覆盖




	TLS的使用
		1.使用关键字    __declspec(thread), 每个线程都有不同变量副本
		2.TLS相关API
			TlsAlloc
			TlsSetValue
			TlsGetValue
			TlsFree

		

/////////////////////////////////////////////////////////////////////////////////////////

// ThreadTls.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "windows.h"
#include <stdio.h>
#include <stdlib.h>

//CHAR *g_pszText = NULL;   //会被覆盖

__declspec(thread) CHAR *g_pszText = NULL;  //每个线程都有一个 g_pszText



void Print()
{
	printf("%s\n", g_pszText);
}


DWORD WINAPI  PrintProc(LPVOID pParam)
{
	CHAR *pszText = (CHAR *)pParam;
	g_pszText = (CHAR *)malloc(100);
	memset(g_pszText, 0, 100);

	strcpy(g_pszText, pszText);


	while(1)
	{
		Print();
		Sleep(1000);
	}

	if(g_pszText)
		free(g_pszText);
}

void Create()
{
	CHAR szText[] = "thead1...........";
	DWORD dwThreadID = 0;

	HANDLE hThread1 = CreateThread(NULL, 0, PrintProc, szText, 0, &dwThreadID);


	CHAR szText2[] = "-----thread2-------";
	HANDLE hThread2 = CreateThread(NULL, 0, PrintProc, szText2, 0, &dwThreadID);


	CHAR szText3[] = "-----thread3-------";
	HANDLE hThread3 = CreateThread(NULL, 0, PrintProc, szText3, 0, &dwThreadID);




	system("pause"); //注意	
}


int main(int argc, char* argv[])
{
	Create();

	//system("pause");  //注意

	printf("Hello World!\n");
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////


























	








