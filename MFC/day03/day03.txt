


virtual BOOL CWnd::Create(
   LPCTSTR lpszClassName,
   LPCTSTR lpszWindowName,
   DWORD dwStyle,
   Const RECT& rect,
   CWnd* pParentWnd,
   UINT nID,
   CCreateContext* pContext = NULL
);




一 工具栏的使用



	1. MFC工具栏相关 


		CToolBar - 父类是CControlBar , 提供了与框架窗口相关的支持

		CToolBarCtrl  - 父类是 CWnd  对Win32下的ToolBar控件进行封装

		在MFC中, 一般使用CToolBar创建工具栏, 如果要进行更多工具栏的操作, 
		需要使用GetToolBarCtrl函数获取该工具栏的CToolBarCtrl类


	2.工具栏的使用
	  2.1 创建
		2.1.1 添加工具栏资源
		2.1.2 添加CToolBar    头文件   afxext.h
		2.1.3 创建工具栏
			Create 和 CreateEx
		2.1.4 
			LoadToolBar 加载工具栏资源

	  2.2 工具栏的停靠

		2.2.1 工具栏支持停靠   EnableDocking
		2.2.2 框架窗口停靠支持  CFrameWnd::EnableDocking
		2.2.3 停靠工具栏   DockToolBar


	3.工具栏显示和关闭



二 视图 View


	//WM_COMMAND   逐层向下(子窗口)派发消息
	WM_COMMAND消息处理,
		WM_COMMAND消息------>顶层窗口(Frame)--->OnWndMsg()--->
		OnCommand-->OnCmdMsg-->逐层派发


	可以使用 SetActiveView 将view设置成当前的活动视图

============================
CMyView::OnTest() line 44
_AfxDispatchCmdMsg(CCmdTarget * 0x00421950 {CMyView}, unsigned int 40002, int 0, void (void)* 0x0040103c CMyView::OnTest(void), void * 0x00000000, unsigned int 12, AFX_CMDHANDLERINFO * 0x00000000) line 88
CCmdTarget::OnCmdMsg(unsigned int 40002, int 0, void * 0x00000000, AFX_CMDHANDLERINFO * 0x00000000) line 302 + 39 bytes
CView::OnCmdMsg(unsigned int 40002, int 0, void * 0x00000000, AFX_CMDHANDLERINFO * 0x00000000) line 159 + 24 bytes
CViewFrame::OnCmdMsg(unsigned int 40002, int 0, void * 0x00000000, AFX_CMDHANDLERINFO * 0x00000000) line 99 + 41 bytes
CWnd::OnCommand(unsigned int 40002, long 0) line 2088
CFrameWnd::OnCommand(unsigned int 40002, long 0) line 317
CWnd::OnWndMsg(unsigned int 273, unsigned int 40002, long 0, long * 0x0012fcc4) line 1597 + 28 bytes
CWnd::WindowProc(unsigned int 273, unsigned int 40002, long 0) line 1585 + 30 bytes

==========================



	


==========================================
// MFCToolBar.cpp : Defines the entry point for the application.
//

#include "stdafx.h"
#include "resource.h"



class CViewApp : public CWinApp
{
public:
	virtual  BOOL  InitInstance();
};


class CMyView : public CView
{
	DECLARE_MESSAGE_MAP()
public:
	virtual void OnDraw(CDC *pDC);

	afx_msg void OnPaint();
	afx_msg void OnTest();
};

BEGIN_MESSAGE_MAP(CMyView, CView)
	ON_WM_PAINT()
	ON_COMMAND(ID_TEST1, OnTest)
END_MESSAGE_MAP()



void CMyView::OnDraw(CDC *pDC)
{
	pDC->TextOut(100, 100, "Hello View");
	
}




void CMyView::OnTest()
{
	AfxMessageBox("测试成功");	
}

/*
HDC BeginPaint(
	HWND hwnd, // 窗口的句柄
	LPPAINTSTRUCT lpPaint // 绘制信息
);
*/

void CMyView::OnPaint()
{
	PAINTSTRUCT ps = {0};
	HDC hDC = ::BeginPaint(m_hWnd, &ps);


	TextOut(hDC, 100, 100, "View Hello" , 10);

	::EndPaint(m_hWnd, &ps);
}






class CViewFrame : public CFrameWnd
{
	DECLARE_MESSAGE_MAP()
public:
	CViewFrame();
	BOOL OnCmdMsg(UINT iID, int iCode, void *pExtra, AFX_CMDHANDLERINFO *lpHandlerInfo);
public:
	int OnCreate(LPCREATESTRUCT lpCreateStruct);

public:
	CMyView *m_pwndView;
};

BEGIN_MESSAGE_MAP(CViewFrame, CFrameWnd)
	ON_WM_CREATE()
END_MESSAGE_MAP()


CViewFrame::CViewFrame()
{
	m_pwndView = NULL;
}


BOOL CViewFrame::OnCmdMsg(UINT iID, int iCode, void *pExtra, AFX_CMDHANDLERINFO *lpHandlerInfo)
{
#if 0
	if(NULL != m_pwndView)
	{
		if(TRUE == m_pwndView->OnCmdMsg(iID, iCode, pExtra, lpHandlerInfo))
		{
			return TRUE;
		}
	}

#endif
	return CFrameWnd::OnCmdMsg(iID, iCode, pExtra, lpHandlerInfo);
}

int CViewFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CFrameWnd::OnCreate(lpCreateStruct);

	m_pwndView = new CMyView();
	m_pwndView->Create(NULL, "Vieeeew", WS_CHILD|WS_VISIBLE|WS_BORDER, CRect(100, 100, 200, 200), this, AFX_IDW_PANE_FIRST /*填满客户区*/);

	SetActiveView(m_pwndView); //就不必自己写消息派发了


	ModifyStyle(WS_EX_CLIENTEDGE,  0 );
	return 0;
}





CViewApp theApp;


BOOL CViewApp::InitInstance()
{

	CViewFrame *pWnd = new CViewFrame();
	pWnd->Create(NULL, "View使用", WS_OVERLAPPEDWINDOW, CFrameWnd::rectDefault, NULL, MAKEINTRESOURCE(IDR_MENU1));
	m_pMainWnd = pWnd;
	m_pMainWnd->ShowWindow(SW_SHOW);
	m_pMainWnd->UpdateWindow();

	return TRUE;
}



======================================








































	